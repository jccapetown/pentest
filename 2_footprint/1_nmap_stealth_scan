#!/usr/bin/python
import subprocess
import sys,os
from netaddr import *

#Description of the script
os.system('clear')
print '''Footprinting::Active::NMAP Stealth Scan.
Description: Provide an IP or CIDR range to be stealth scanned for open ports.
			'''

#Set the folder where the output files will be saved to
savefolder = '/tmp/' + sys.argv[0] + '_results'
report = '../6_reports/' + sys.argv[0] + '_results'
if not os.path.exists(savefolder):
	os.system('mkdir %s '% savefolder)

#Check to see if the script runs as root
if not os.geteuid() == 0:
	sys.exit('Script must be run as root')

#Check the correct format for an IP Address or CIDR
while 1==1:
	try:
		print "usage: IP = 192.x.x.x"
		print "usage: CIDR = 192.x.x.x/24\n"
		ip = raw_input("IP/CIDR to scan: ")
		if "x" in ip:
			sys.exit();
		ipaddress = IPNetwork(ip)
		break;
	except:
		print "IP/CIDR is out of range."
		sys.exit()

#Replaces the / with a _ from the raw_input
ipreplace =  ip.replace("/","_")

#Run the nmap command that does a SYN scan and outputs it to a file
#nmapcommand="nmap -sS -Pn -oG %s/%s.txt %s" % (savefolder, ipreplace, ip)
nmapcommand="nmap -Pn -oG %s/%s.txt %s" % (savefolder, ipreplace, ip)
result = subprocess.check_output(nmapcommand, shell=True)

output = "%s/%s.txt" % (savefolder, ipreplace)

#Open and close the saved file and read each line
f = open(output, 'rb')
lines = f.readlines()
f.close()	


f = open(report, 'w');
f.write('%s,%s,%s,%s\n' %  ('host','port', 'state', 'protocol') )
for line in lines:
	if line.strip() != '':
		if "Ports:" in line.strip():
                    if len(line.strip().split("\t")) > 2:
			host, ports, ignore = line.strip().split("\t")
                    else:
                        host, ports = line.strip().split("\t")
                    host = host.split(':')[1]
		    ports = ports.split(':')[1]
		    ports = ports.split(',')
		    for portinfo in ports:
			port, state, protocol, var1, var2, var3, var4, var5 = portinfo.split('/')
			print port, state, protocol
			f.write('%s,%s,%s,%s\n' %  (host.split()[0],port.strip(), state, protocol) )
f.close()

